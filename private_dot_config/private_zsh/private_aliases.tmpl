# ~/.aliases

alias bo='brew update && brew outdated'
alias cz='chezmoi'
alias ls='gls --color=auto --hyperlink=auto'
alias lsl='gls --color=auto -halG --hyperlink=auto'
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"
alias vg='rg --vimgrep'
alias vim='nvim'
alias wget='wget --no-hsts'
alias flushdns='sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder'
alias k='kubectl'
alias kx='kubectx'
alias kn='kubens'
alias parse_jwt="jq -R 'split(".") | .[1] | @base64d | fromjson'"
alias speedtest="wget --output-document=/dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip"
alias tf='terraform'

# fix the pam file to allow touch id to auth sudo. macos updates revert this.
alias fixsudo="if grep -q pam_tid /etc/pam.d/sudo; then echo 'no need'; else (echo 1a; echo 'auth       sufficient     pam_tid.so'; echo .; echo w) | sudo ed - /etc/pam.d/sudo; fi"

# Aliases to make specifica commands XDG compliant
alias tflint='tflint -c ~/.config/tflint/config.hcl'

# zsh functions for interacting with kubernetes
k8s-exec-all-pods() {
  deployment="$1"
  container="$2"
  shift 2  # Shift the argument list to remove the deployment name and container name
  command_to_run=("$@")  # Capture all remaining arguments as an array

  echo "Deployment: $deployment"
  echo "Container: $container"
  echo "Command: ${command_to_run[@]}"

  if [[ -z "$deployment" || -z "$container" || ${#command_to_run[@]} -eq 0 ]]; then
    echo "Usage: k8s-exec-all-pods <deployment_name> <container_name> <command> [arg1] [arg2] ..."
    return 1
  fi

  # Get the list of pod names belonging to the deployment
  pod_names=($(kubectl get pods -l=app="$deployment" -o=jsonpath='{.items[*].metadata.name}'))

  if [[ ${#pod_names[@]} -eq 0 ]]; then
    echo "No pods found for deployment $deployment"
    return 1
  fi

  for pod in "${pod_names[@]}"; do
    echo "Running command on pod $pod in container $container:"
    kubectl exec -it "$pod" -c "$container" -- "${command_to_run[@]}"
    echo ""
  done
}

k8s-list-resources() {
  namespace=$1
  if [[ -z "$namespace" ]]; then
    echo "Usage: k8s-list-resources <namespace>"
    return 1
  fi

  for i in $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq); do
    resource_output=$(kubectl -n $namespace get --ignore-not-found ${i} 2>/dev/null)
    if [[ -n "$resource_output" ]]; then
      echo "Resource type:" $i
      echo "$resource_output"
      echo ""
    fi
  done
}

# macos date sucks, this simulates gnu date
date() {
  if [ "$1" = "-I" ]; then
    command date "+%Y-%m-%dT%H:%M:%S%z"
  else
    command date "$@"
  fi
}

# a `kubectl apply` that (probably) won't fuck up production.
ka() {
  current_context=$(kubectl config current-context)

  if [[ "$current_context" == *prod* ]]; then
    echo "Error: Current context ($current_context) contains 'prod'. Exiting to prevent accidental changes to production."
    return 1
  else
    # If the context does not contain 'prod', proceed with `kubectl apply` using whatever arguments are passed to it; usually that'd be `-f $file_path`
    # NB: this will break down in stack world, but that's fine for now.
    kubectl apply "$@"
  fi
}

# https://vrongmeal.com/blog/clear-screen-preserve-buffer
# wezterm loses what's on the screen on ^L, so this prevents that
my-clear() {
  for i in {3..$(tput lines)}
  do
    printf '\n'
  done
  printf '\33[H\33[2J'
  zle reset-prompt
}
zle -N my-clear
bindkey '^L' my-clear

{{ if eq .chezmoi.hostname "arcadia" }}
# persona stuff
alias dcom='docker compose'
alias cpw='cd ~/Code/persona-web'
alias cpi='cd ~/Code/persona-infrastructure'
alias cpk='cd ~/Code/persona-kubernetes'

# get a shell on a random proxysql pod
alias proxycore='k exec deployments/proxysql-core -it -c proxysql -- /bin/bash'
alias proxysatellite='k exec deployments/proxysql-satellite -it -c proxysql -- /bin/bash'
alias proxyshell='f() { kubectl exec $1 -it -c proxysql -- /bin/bash };f'
{{- end }}
